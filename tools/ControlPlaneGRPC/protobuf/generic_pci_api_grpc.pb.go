// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package generic_pci_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GenericPciApiClient is the client API for GenericPciApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GenericPciApiClient interface {
	Read32(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Value32, error)
	Read64(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Value64, error)
	Write32(ctx context.Context, in *AddressValue32, opts ...grpc.CallOption) (*Response, error)
	Write64(ctx context.Context, in *AddressValue64, opts ...grpc.CallOption) (*Response, error)
}

type genericPciApiClient struct {
	cc grpc.ClientConnInterface
}

func NewGenericPciApiClient(cc grpc.ClientConnInterface) GenericPciApiClient {
	return &genericPciApiClient{cc}
}

func (c *genericPciApiClient) Read32(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Value32, error) {
	out := new(Value32)
	err := c.cc.Invoke(ctx, "/generic_pci_api.GenericPciApi/read32", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genericPciApiClient) Read64(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Value64, error) {
	out := new(Value64)
	err := c.cc.Invoke(ctx, "/generic_pci_api.GenericPciApi/read64", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genericPciApiClient) Write32(ctx context.Context, in *AddressValue32, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/generic_pci_api.GenericPciApi/write32", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genericPciApiClient) Write64(ctx context.Context, in *AddressValue64, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/generic_pci_api.GenericPciApi/write64", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GenericPciApiServer is the server API for GenericPciApi service.
// All implementations must embed UnimplementedGenericPciApiServer
// for forward compatibility
type GenericPciApiServer interface {
	Read32(context.Context, *Address) (*Value32, error)
	Read64(context.Context, *Address) (*Value64, error)
	Write32(context.Context, *AddressValue32) (*Response, error)
	Write64(context.Context, *AddressValue64) (*Response, error)
	mustEmbedUnimplementedGenericPciApiServer()
}

// UnimplementedGenericPciApiServer must be embedded to have forward compatible implementations.
type UnimplementedGenericPciApiServer struct {
}

func (UnimplementedGenericPciApiServer) Read32(context.Context, *Address) (*Value32, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read32 not implemented")
}
func (UnimplementedGenericPciApiServer) Read64(context.Context, *Address) (*Value64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read64 not implemented")
}
func (UnimplementedGenericPciApiServer) Write32(context.Context, *AddressValue32) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write32 not implemented")
}
func (UnimplementedGenericPciApiServer) Write64(context.Context, *AddressValue64) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write64 not implemented")
}
func (UnimplementedGenericPciApiServer) mustEmbedUnimplementedGenericPciApiServer() {}

// UnsafeGenericPciApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GenericPciApiServer will
// result in compilation errors.
type UnsafeGenericPciApiServer interface {
	mustEmbedUnimplementedGenericPciApiServer()
}

func RegisterGenericPciApiServer(s grpc.ServiceRegistrar, srv GenericPciApiServer) {
	s.RegisterService(&GenericPciApi_ServiceDesc, srv)
}

func _GenericPciApi_Read32_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenericPciApiServer).Read32(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generic_pci_api.GenericPciApi/read32",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenericPciApiServer).Read32(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenericPciApi_Read64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenericPciApiServer).Read64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generic_pci_api.GenericPciApi/read64",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenericPciApiServer).Read64(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenericPciApi_Write32_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressValue32)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenericPciApiServer).Write32(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generic_pci_api.GenericPciApi/write32",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenericPciApiServer).Write32(ctx, req.(*AddressValue32))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenericPciApi_Write64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressValue64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenericPciApiServer).Write64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generic_pci_api.GenericPciApi/write64",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenericPciApiServer).Write64(ctx, req.(*AddressValue64))
	}
	return interceptor(ctx, in, info, handler)
}

// GenericPciApi_ServiceDesc is the grpc.ServiceDesc for GenericPciApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GenericPciApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "generic_pci_api.GenericPciApi",
	HandlerType: (*GenericPciApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "read32",
			Handler:    _GenericPciApi_Read32_Handler,
		},
		{
			MethodName: "read64",
			Handler:    _GenericPciApi_Read64_Handler,
		},
		{
			MethodName: "write32",
			Handler:    _GenericPciApi_Write32_Handler,
		},
		{
			MethodName: "write64",
			Handler:    _GenericPciApi_Write64_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/generic_pci_api.proto",
}
